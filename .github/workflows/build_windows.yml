name: 🖥 Build Windows EXE - Fletube

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    env:
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: 1
      SECRET: ${{ secrets.SECRET }}
      EMAIL_USER: ${{ secrets.EMAIL_USER }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      FEEDBACK_RECIPIENT_EMAIL: ${{ secrets.FEEDBACK_RECIPIENT_EMAIL }}
      SUPABASE_URL_USERS: ${{ secrets.SUPABASE_URL_USERS }}
      SUPABASE_KEY_USERS: ${{ secrets.SUPABASE_KEY_USERS }}


    steps:
    - name: 🧾 Checkout do código
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13.3'

    - name: 📦 Instalar dependências do projeto
      run: |
        pip install --upgrade pip wheel
        pip install flet==0.28.3 python-dotenv requests yt-dlp

    - name: 🛠 Configurar MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: '17.0'

    - name: 📦 Instalar Build Tools
      run: choco install visualstudio2022-workload-vctools --no-progress

    - name: 📁 Verificar estrutura de arquivos
      run: |
        echo "🔍 Verificando diretórios e arquivos:"
        dir
        echo "🔍 Verificando pyproject.toml:"
        type pyproject.toml
        echo "🔍 Verificando pasta assets:"
        dir assets || echo "Pasta assets não encontrada"

    - name: 🔐 Criar arquivo .env para o build
      run: |
        echo "SECRET=$env:SECRET" > .env
        echo "EMAIL_USER=$env:EMAIL_USER" >> .env
        echo "EMAIL_PASSWORD=$env:EMAIL_PASSWORD" >> .env
        echo "SMTP_SERVER=$env:SMTP_SERVER" >> .env
        echo "SMTP_PORT=$env:SMTP_PORT" >> .env
        echo "FEEDBACK_RECIPIENT_EMAIL=$env:FEEDBACK_RECIPIENT_EMAIL" >> .env
        echo "SUPABASE_URL_USERS=$env:SUPABASE_URL_USERS" >> .env
        echo "SUPABASE_KEY_USERS=$env:SUPABASE_KEY_USERS" >> .env

    - name: 🚀 Build Windows EXE com Flet
      run: |
        flet build windows --project . --compile-app --splash-color "#0A1A2F" --splash-dark-color "#0A1A2F" -vv

    - name: 📁 Mostrar arquivos gerados
      run: |
        echo "📦 Estrutura do build:"
        dir build || echo "Pasta build não encontrada"
        
        echo "📱 EXE gerado:"
        dir build\windows\release || echo "Nenhum EXE encontrado"

    - name: 📤 Upload do EXE
      uses: actions/upload-artifact@v4
      with:
        name: exe-fletube-${{ github.sha }}
        path: |
          build\windows\release\**\*.exe
        retention-days: 30

    - name: ✅ Finalizado!
      run: echo "✨ EXE gerado com sucesso! Verifique na aba Actions → Artifacts"
